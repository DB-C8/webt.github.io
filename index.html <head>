<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <!-- ... existing meta tags ... -->

  <title>Web610 ðŸ˜Ž</title>

  <!-- External Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">

  <!-- Favicon Links -->
  <!-- ... existing favicon links ... -->

  <!-- Critical CSS Inline -->
  <style>
    /* Critical CSS styles */
    * { margin: 0; padding: 0; box-sizing: border-box; }
    html, body { 
      height: 100%; 
      width: 100%; 
      overflow: hidden; 
      font-family: Arial, sans-serif; 
      user-select: none; 
    }
    /* ... other critical styles ... */
  </style>

  <!-- Non-Critical CSS Loaded Asynchronously -->
  <link rel="stylesheet" href="styles.css" media="print" onload="this.media='all'">
  <noscript><link rel="stylesheet" href="styles.css"></noscript>

  <!-- External Scripts with defer -->
  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js" defer></script>
  <!-- Removed Three.js from initial load; will load dynamically -->
</head>
<body>
  <!-- Existing Body Content -->
  <!-- ... -->

  <!-- Moved All Inline Scripts Below -->

  <!-- Module-Based Script -->
  <script type="module">
    import { Environment } from './environment.js';
    import { CreateParticles } from './createParticles.js';
    import { NameForm } from './nameForm.js';

    document.addEventListener('DOMContentLoaded', async () => {
      const environment = new Environment();
      // Initialize other components
      environment.init();

      // Lazy load additional modules if needed
      const fab = document.getElementById('fab');
      fab.addEventListener('click', () => {
        NameForm.toggleForm();
      });
    });

    // Utility Functions
    function throttle(func, limit) {
      let inThrottle;
      return function(...args) {
        const context = this;
        if (!inThrottle) {
          func.apply(context, args);
          inThrottle = true;
          setTimeout(() => inThrottle = false, limit);
        }
      };
    }

    function debounce(func, wait, immediate) {
      let timeout;
      return function executedFunction(...args) {
        const context = this;
        const later = function() {
          timeout = null;
          if (!immediate) func.apply(context, args);
        };
        const callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
      };
    }
  </script>

  <!-- Three.js Loader Script -->
  <script type="module">
    // environment.js
    export class Environment {
      constructor() {
        this.init();
      }

      async init() {
        await this.loadThreeJS();
        this.preload();
      }

      loadThreeJS() {
        return new Promise((resolve, reject) => {
          const script = document.createElement('script');
          script.src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/r125/three.min.js";
          script.onload = () => resolve();
          script.onerror = () => reject(new Error('Three.js failed to load.'));
          document.head.appendChild(script);
        });
      }

      preload() {
        // Existing preloading logic
      }

      onWindowResize() {
        // Optimized resize handler
      }

      render() {
        // Optimized render loop
      }
    }
  </script>

  <!-- Name Form Module -->
  <script type="module">
    // nameForm.js
    export class NameForm {
      static toggleForm() {
        const nameForm = document.getElementById('name-form');
        const fab = document.getElementById('fab');
        const topRightButton = document.getElementById('top-right-button');

        if (nameForm.classList.contains('active')) {
          nameForm.classList.remove('active');
          fab.classList.remove('hidden');
        } else {
          nameForm.classList.add('active');
          fab.classList.add('hidden'); 
        }

        if (nameForm.classList.contains('active')) {
          this.updateNameFormPosition();
        }
      }

      static updateNameFormPosition() {
        const fab = document.getElementById('fab');
        const nameForm = document.getElementById('name-form');
        const fabRect = fab.getBoundingClientRect();
        let leftPosition = fabRect.left - nameForm.clientWidth - 10;
        let topPosition = fabRect.top + (fabRect.height / 2) - (nameForm.clientHeight / 2);

        if (topPosition < 10) {
          topPosition = 10;
        }

        if (topPosition + nameForm.clientHeight > window.innerHeight) {
          topPosition = window.innerHeight - nameForm.clientHeight - 10;
        }

        nameForm.style.left = `${leftPosition}px`;
        nameForm.style.top = `${topPosition}px`;
      }
    }
  </script>

  <!-- Lazy Load Images Script -->
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const lazyImages = document.querySelectorAll('img.lazyload');
      const options = {
        root: null,
        rootMargin: "0px",
        threshold: 0.1
      };

      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            img.src = img.dataset.src;
            img.classList.remove('lazyload');
            observer.unobserve(img);
          }
        });
      }, options);

      lazyImages.forEach(img => {
        imageObserver.observe(img);
      });
    });
  </script>
</body>
</html> 